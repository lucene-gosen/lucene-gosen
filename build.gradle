repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url "https://maven.restlet.com"
  }
}
group 'com.github.lucene-gosen'
description 'Japanese analysis for Apache Lucene/Solr'

apply plugin: 'java'
apply plugin: 'idea'

version = luceneVersion

dependencies {
  compile "org.apache.lucene:lucene-core:${luceneVersion}"
  compile "org.apache.lucene:lucene-analyzers-common:${luceneVersion}"
  compile "org.apache.lucene:lucene-codecs:${luceneVersion}"
  compile "com.ibm.icu:icu4j:${icu4jVersion}"
  compile "org.restlet.jee:org.restlet:${restletVersion}"
  compile "org.restlet.jee:org.restlet.ext.servlet:${restletVersion}"

  testCompile "junit:junit:${junitVersion}"
  testCompile "org.apache.lucene:lucene-test-framework:${luceneVersion}"
  testCompile "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${randomizedrunnerVersion}"
}

jar {
  version version
}

javadoc {
  options.locale = 'en_US'
}
defaultTasks 'clean', 'dist'

// Re-build dictionary with user custom dictionaries, without copy
task rebuildNaistChasenDic() {
  doLast {
    println "rebuilding dicitonary"
  }
}

tasks.rebuildNaistChasenDic.dependsOn(compileJava, ":dictionary:cleanCompiledNaistChasen", ":dictionary:compileNaistChasen")

task rebuildIpadicDic() {
  doLast {
    println "rebuilding dicitonary"
  }
}

tasks.rebuildIpadicDic.dependsOn(compileJava, ":dictionary:cleanCompiledIpadic", ":dictionary:compileIpadic")


// Create Jar library without dictionary
task jarWithNaistChasen(type: Jar) {
  classifier naistDictype
  from files(sourceSets.main.output,
          fileTree("dictionary" + File.separator
            + naistDictype + File.separator + compiledDicDir).include('**/*.sen')
  )
}

tasks.jarWithNaistChasen.dependsOn(compileJava, ":dictionary:compileNaistChasen")

task jarWithIpadic(type: Jar) {
  classifier ipadicDictype
  from files(sourceSets.main.output,
          fileTree("dictionary" + File.separator
                  + ipadicDictype + File.separator + compiledDicDir).include('**/*.sen')
  )
}

tasks.jarWithIpadic.dependsOn(compileJava, ":dictionary:compileIpadic")

task javadocJar(type: Jar) {
  classifier 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier 'sources'
  from sourceSets.main.allSource
}

// Make packages for distribution
task dist(dependsOn: [jar, jarWithIpadic, jarWithNaistChasen, test]) {
}

tasks.test.dependsOn(compileJava, ":dictionary:compileNaistChasen", ":dictionary:compileIpadic")

if (gradle.startParameter.taskNames.contains('uploadArchives')) {
  apply from: 'uploadArchives.gradle'
}
